PROCEDURE "aa.movielens.db.hdb.pal.procedures::apriori_execute" (
   in min_support    double default 0.1,
   in min_confidence double default 0.1,
   in min_lift       double default 0.0,
   in ubiquitous     double default 1.0,
   out rules   "aa.movielens.db.hdb.pal::apriori.rules",
   out pmml    "aa.movielens.db.hdb.pal::apriori.pmml"
)
LANGUAGE SQLSCRIPT SQL SECURITY INVOKER AS
BEGIN
    -- Insert operation parameters
    truncate table "aa.movielens.db.hdb.pal::apriori.parameter";
    if :min_support     is not null then insert into "aa.movielens.db.hdb.pal::apriori.parameter" VALUES ('MIN_SUPPORT'     , null, :min_support    , null);    end if;
    if :min_confidence  is not null then insert into "aa.movielens.db.hdb.pal::apriori.parameter" VALUES ('MIN_CONFIDENCE'  , null, :min_confidence , null);    end if;
    if :min_lift        is not null then insert into "aa.movielens.db.hdb.pal::apriori.parameter" VALUES ('MIN_LIFT'        , null, :min_lift       , null);    end if;
    if :ubiquitous      is not null then insert into "aa.movielens.db.hdb.pal::apriori.parameter" VALUES ('UBIQUITOUS'      , null, :ubiquitous     , null);    end if;
    insert into "aa.movielens.db.hdb.pal::apriori.parameter" VALUES ('MAX_CONSEQUENT'  , 1   , null  , null);
    insert into "aa.movielens.db.hdb.pal::apriori.parameter" VALUES ('MAX_ITEM_LENGTH' , 1   , null  , null);
    parameter = select * from "aa.movielens.db.hdb.pal::apriori.parameter";                                 

    movielens_dataset = select USERID, MOVIEID from "aa.movielens.db.data::ratings";
    call "aa.movielens.db.hdb.pal.afllang::apriori"(
        :movielens_dataset,
        :parameter,
        :rules,
        :pmml
    );
    -- Clear tables content
    truncate table "aa.movielens.db.hdb.pal::apriori.rules";
    truncate table "aa.movielens.db.hdb.pal::apriori.pmml";
    -- Insert the results
    insert into "aa.movielens.db.hdb.pal::apriori.rules" select * from :rules;
    insert into "aa.movielens.db.hdb.pal::apriori.pmml"  select * from :pmml;
END;
