PROCEDURE "aa.movielens.db.hdb.apl.procedures::recommendation_result_collaborative" (
    in UserId              integer default -1
   ,in IncludeBestSeller   integer default 0
   ,in BestSellerThreshold integer default 50000
   ,in SkipAlreadyOwned    integer default 1
   ,in KeepTopN            integer default 5
   ,out results            "aa.movielens.db.hdb.apl::recommendation.tt_movielens_collaborative_result"
)
LANGUAGE SQLSCRIPT SQL SECURITY INVOKER AS
BEGIN
    results = select
    userid, rank, t1.movieid, score, title, genres, imdbid, tmdbid
  from (
    select
        t1.userid
    , t1.consequent as movieid, t1.score as score
    , row_number() over(partition by t1.userid order by t1.score desc, t1.consequent desc ) as rank
    from (
        select
            t1.userid, t1.consequent, max(t1.score)  as score
        from (
          select
                t1.userid, t1.consequent
              , t1.support / ( (coalesce (t2_1.count_antecedent,0) + coalesce (t2_2.count_antecedent,0) ) ) as score -- confidence calculation
          from (
              select
                  t1.userid, t1.antecedent , t1.consequent, t1.support
              from (
                select
                    spacein.userid
                  , rules.kxnodesecond   as antecedent
                  , rules.kxnodesecond_2 as consequent
                  , rules.weight         as support
                from "aa.movielens.db.data::ratings" spacein
                left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Transactions') products on (products.kxnodefirst  = spacein.userid)
                left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Item'        ) rules    on (products.kxnodesecond = rules.kxnodesecond)
                left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Transactions') notin    on (rules.kxnodesecond_2  = notin.kxnodesecond) and (notin.kxnodefirst = spacein.userid) and (:SkipAlreadyOwned = 1)
                  where rules.kxnodesecond is not null
                  and   spacein.userid = :UserId
                  and   notin.kxnodesecond is null
              ) t1
              union all
              select
                  t1.userid
                , t1.antecedent , t1.consequent
                , t1.support
              from (
                select
                    spacein.userid
                  , rules.kxnodesecond_2 as antecedent
                  , rules.kxnodesecond   as consequent
                  , rules.weight         as support
                from "aa.movielens.db.data::ratings" spacein
                left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Transactions') products on (products.kxnodefirst  = spacein.userid)
                left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Item'        ) rules    on (products.kxnodesecond = rules.kxnodesecond_2)
                left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Transactions') notin    on (rules.kxnodesecond    = notin.kxnodesecond) and (notin.kxnodefirst = spacein.userid) and (:SkipAlreadyOwned = 1)
                where rules.kxnodesecond_2 is not null
                and   spacein.userid = :UserId
                and notin.kxnodesecond is null
              ) t1
          ) t1
          left outer join (select kxnodesecond   as antecedent, cast(count(*) as float) as count_antecedent from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name ='Transactions' group by kxnodesecond  ) t2_1 on (t1.antecedent = t2_1.antecedent)
          left outer join (select kxnodesecond_2 as antecedent, cast(count(*) as float) as count_antecedent from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name ='Transactions' group by kxnodesecond_2) t2_2 on (t1.antecedent = t2_2.antecedent)
          union all
          select :UserId as userid, movieid, count(1) from "aa.movielens.db.data::ratings" spacein
          left outer join (select * from "aa.movielens.db.hdb.apl::recommendation.model_links" where graph_name = 'Transactions') notin    on (spacein.movieid    = notin.kxnodesecond) and (notin.kxnodefirst = spacein.userid) and :SkipAlreadyOwned = 1
          where :IncludeBestSeller = 1 group by movieid having count(1) > BestSellerThreshold
        ) t1 group by t1.userid,  t1.consequent
    ) t1
  ) t1
  left outer join "aa.movielens.db.data::movies" movies on movies.movieid = t1.movieid
  left outer join "aa.movielens.db.data::links"  links  on links.movieid  = t1.movieid
  where rank <= :KeepTopN;
END;
